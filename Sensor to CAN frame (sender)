#include <Arduino.h>
#include "driver/twai.h"

// ----------------- CAN/TWAI pins -----------------
static const gpio_num_t TX_GPIO = GPIO_NUM_17;  // ESP32 -> SN65HVD230 TXD
static const gpio_num_t RX_GPIO = GPIO_NUM_16;  // SN65HVD230 RXD -> ESP32

// ----------------- ADC config --------------------
static const int TEMP_PIN = 25;  // ESP32 ADC2; use an ADC1 pin (e.g., 34) if Wi-Fi is enabled

// 500 kbit/s; change to TWAI_TIMING_CONFIG_250KBITS() if needed
static twai_timing_config_t t_config = TWAI_TIMING_CONFIG_500KBITS();
static twai_filter_config_t f_config = TWAI_FILTER_CONFIG_ACCEPT_ALL();
static twai_general_config_t g_config =
    TWAI_GENERAL_CONFIG_DEFAULT(TX_GPIO, RX_GPIO, TWAI_MODE_NORMAL);

void setup() {
  Serial.begin(115200);
  delay(200);

  // ---- ADC setup ----
  analogReadResolution(12);                    // 0..4095 counts
  analogSetPinAttenuation(TEMP_PIN, ADC_11db); // ~0..3.55 V range
  pinMode(TEMP_PIN, INPUT);

  // ---- CAN setup ----
  if (twai_driver_install(&g_config, &t_config, &f_config) == ESP_OK &&
      twai_start() == ESP_OK) {
    Serial.println("TWAI (CAN) started (Sender).");
  } else {
    Serial.println("Failed to start TWAI.");
    while (true) delay(1000);
  }
}

void loop() {
  static uint32_t counter = 0;

  // --------- Read temperature on GPIO25 ----------
  int raw = analogRead(TEMP_PIN);                   // 0..4095
  int mv  = analogReadMilliVolts(TEMP_PIN);         // calibrated mV at the pin

  // TMP36/MCP9700A: 10 mV/°C with 500 mV offset
  float tempC = (mv - 500.0f) / 10.0f;
  // If using LM35 (10 mV/°C, 0 mV @ 0°C), use the next line instead:
  // float tempC = mv / 10.0f;

  float tempF = tempC * 9.0f / 5.0f + 32.0f;
  int16_t tempC_x100 = (int16_t)(tempC * 100.0f);   // pack °C with two decimals

  Serial.printf("ADC=%d, mV=%d, TempC=%.2f, TempF=%.2f\n", raw, mv, tempC, tempF);

  // --------------- Build CAN frame ----------------
  twai_message_t msg = {};
  msg.identifier = 0x123;       // must match receiver
  msg.extd = 0;                 // standard 11-bit frame
  msg.rtr = 0;                  // data frame
  msg.data_length_code = 8;

  // Counter in big-endian
  msg.data[0] = (counter >> 24) & 0xFF;
  msg.data[1] = (counter >> 16) & 0xFF;
  msg.data[2] = (counter >>  8) & 0xFF;
  msg.data[3] = (counter      ) & 0xFF;

  // Temperature (°C * 100), big-endian
  msg.data[4] = (uint8_t)((tempC_x100 >> 8) & 0xFF);
  msg.data[5] = (uint8_t)( tempC_x100       & 0xFF);

  // Raw millivolts, big-endian
  msg.data[6] = (uint8_t)((mv >> 8) & 0xFF);
  msg.data[7] = (uint8_t)( mv       & 0xFF);

  // --------------- Transmit ----------------------
  esp_err_t res = twai_transmit(&msg, pdMS_TO_TICKS(1000));
  if (res == ESP_OK) {
    Serial.printf("Sent ID 0x%03X, counter=%lu\n",
                  msg.identifier, (unsigned long)counter);
    counter++;
  } else {
    Serial.printf("TX failed: %d\n", (int)res);
  }

  delay(500);
}
